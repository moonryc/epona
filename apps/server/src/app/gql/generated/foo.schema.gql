# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ChatMessage {
  content: String!
  conversationId: String
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  userId: String
}

input ChatMessageWhereInput {
  conversationId: String
  ids: [String!]
  isSummary: Boolean
  role: MessageSource
}

type ChatMessageWithCount {
  count: Float!
  items: [ChatMessage!]!
}

input ChatMessagesInput {
  skip: Float
  take: Float
  where: ChatMessageWhereInput
}

type Conversation {
  createdAt: DateTime!
  id: String!
  name: String!
  owner: ConversationOwner!
  prompt: String!
}

enum ConversationOwner {
  EPONA
}

input ConversationWhere {
  owner: ConversationOwner
}

type ConversationWithCount {
  conversation: Conversation!
  count: Float!
}

input ConversationsInput {
  skip: Float
  take: Float
  where: ConversationWhere
  withDeleted: Boolean
}

input CreateChatMessageInput {
  content: String!
  conversationId: String!
  images: [String!]
  isSummary: Boolean = false
  role: MessageSource!
}

input CreateConversationInput {
  name: String!
  owner: ConversationOwner!
  prompt: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoadEponaMemoryInput {
  conversationId: String!
}

enum MessageSource {
  ASSISTANT
  SYSTEM
  USER
}

type Mutation {
  createChatMessage(input: CreateChatMessageInput!): ChatMessage!
  createConversation(input: CreateConversationInput!): Conversation!
  deleteChatMessages(ids: [String!]!): SuccessResponse!
  deleteConversations(ids: [String!]!): SuccessResponse!
  loadEponaMemory(input: LoadEponaMemoryInput!): SuccessResponse!
  saveEponaMemory(input: SaveEponaMemoryInput!): SuccessResponse!
  updateChatMessage(input: UpdateChatMessageInput!): ChatMessage!
  updateConversation(input: UpdateConversationInput!): Conversation!
}

type Query {
  chatMessages(input: ChatMessagesInput): [ChatMessage!]!
  chatMessagesWithCount(input: ChatMessagesInput): [ChatMessageWithCount!]!
  conversationById(id: String!): Conversation!
  conversations(input: ConversationsInput): [Conversation!]!
  conversationsWithCount(input: ConversationsInput): [ConversationWithCount!]!
}

input SaveEponaMemoryInput {
  conversationId: String!
}

type SuccessResponse {
  message: String
  success: Boolean!
}

input UpdateChatMessageInput {
  content: String
  id: String!
  images: [String!]
  isSummary: Boolean
  role: MessageSource
}

input UpdateConversationInput {
  id: String!
  name: String
  owner: ConversationOwner
  prompt: String
}